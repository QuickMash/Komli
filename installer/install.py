import os
import requests
import time
import sys

name = os.name
install_ollama = None
config = {}
version = "0.1.1"

config_template = """
# Generated by Komli Installer
[DEFAULT]
name = "Komli"
sys_prompt = "You are a friendly assistant"
model = "qwen2.5-coder:0.5b"
# https://www.timeanddate.com/time/zones/
timezone = "UTC"
database_prefix = "komli_"
clean_console = False

[Web]
webdir = "/" 
port = "5000"


[PROCESSING]
markdown = True


[EMAIL] # Ignore, future feature
enable = False
# Use html Formatting
footer = "Komli AI\n<a href='quickmash.cc'\n&copyQuickMash</a>"

[TOKEN_LIMIT]
# Comming Soon!
# Recommended to be enabled with token save up
join_reward_enable = True
join_reward = "5000"
guest_model = "qwen2.5-coder:0.5b"
limit_user = False
# Use more powerful model
user_model = "qwen2.5-coder:1.5b"
# set to None to make user wait
token_empty_model = "qwen2.5-coder:0.5b"

# Dont set token reset and token save up together, choose one
# Applys to all guest and user
token_reset = True
# How many tokens to set the user to when reset happens
tokens_to_set = "1500"
tokens_saveup = "False"
# Reward tokens when r
daily_tokens = "1000"
# time to make token reset/add(Time zone is set in DEFAULT)
token_set_time = "12:00"
am_pm = "AM"


[SYSTEM]
ver = "0.1.1" # VERSION, DO NOT CHANGE
autoupdate = True
debug = True
"""

def ollama_getValue():
    global install_ollama
    install_ollama = input("Do you want to install Ollama? [Yes]/No ").strip().lower()
    if install_ollama in ["yes", ""]:
        install_ollama = True
    elif install_ollama == "no":
        print("Ollama is required to run, make sure it is installed before running Komli.")
        install_ollama = False
    else:
        print("Unknown Input, try again")
        ollama_getValue()

def askconfig():
    global config
    print("Config")
    config['webdir'] = input("Enter the web directory you want to host from? Default is [/] ").strip() or '/'
    config['ai_name'] = input("Enter the name for your assistant? Default is [Komli] ").strip() or 'Komli'
    config['model'] = input("Enter the name of the model you want to use? Default is [qwen2.5-coder:0.5b] ").strip() or 'qwen2.5-coder:0.5b'
    config['sys_prompt'] = input("Enter the system prompt? Default is [You are a friendly assistant] ").strip() or 'You are a friendly assistant'
    config['markdown'] = input("Enable Markdown? Default is [Yes]/No ").strip() or 'yes'
    config['port'] = input("Enter the port to run on? Default is [5000] ").strip() or '5000'
    
    if input("Download Python Modules? [Yes]/No ").strip().lower() in ["yes", ""]:
        error_count = 0
        modules = ["requests", "ollama", "flask", "configparser", "markupsafe"]
        
        for module in modules:
            try:
                result = os.system(f"pip install {module}")
                if result != 0:
                    print(f"Failed to install {module}")
                    error_count += 1
                else:
                    print(f"Successfully installed {module}")
            except Exception as e:
                print(f"Failed to install {module}: {e}")
                error_count += 1
        
        if error_count == len(modules):
            install_status = "failed"
        elif error_count >= 1:
            install_status = "partial"
        else:
            install_status = "success"
        
        print(f"{error_count} errors occurred, installation {install_status}!")

    ollama_getValue()
    if input("Save Config? [Yes]/No ").strip().lower() in ["yes", ""]:
        setConfig()

def setConfig():
    global config
    # Determine the config file path (go up one directory from installer/)
    config_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config.cfg')
    
    # Use the config template and replace values
    config_content = config_template.format(
        name=config.get("ai_name", "Komli"),
        webdir=config.get("webdir", "/"),
        port=config.get("port", "5000"),
        model=config.get("model", "qwen2.5-coder:0.5b"),
        sys_prompt=config.get("sys_prompt", "You are a friendly assistant"),
        markdown=config.get("markdown", "yes").lower() == "yes",
        version=version
    )
    
    # Write the proper config file format
    with open(config_file, 'w') as f:
        f.write(f"""# Generated by Komli Installer
[DEFAULT]
name = "{config.get("ai_name", "Komli")}"
sys_prompt = "{config.get("sys_prompt", "You are a friendly assistant")}"
model = "{config.get("model", "qwen2.5-coder:0.5b")}"
timezone = "UTC"
database_prefix = "komli_"
clean_console = "False"

[Web]
webdir = "{config.get("webdir", "/")}"
port = "{config.get("port", "5000")}"

[PROCESSING]
markdown = {str(config.get("markdown", "yes").lower() == "yes").title()}

[EMAIL]
enable = False
footer = "Komli AI\\n<a href='quickmash.cc'\\n&copyQuickMash</a>"

[TOKEN_LIMIT]
join_reward_enable = True
join_reward = "5000"
guest_model = "{config.get("model", "qwen2.5-coder:0.5b")}"
limit_user = False
user_model = "qwen2.5-coder:1.5b"
token_empty_model = "{config.get("model", "qwen2.5-coder:0.5b")}"
token_reset = True
tokens_to_set = "1500"
tokens_saveup = "False"
daily_tokens = "1000"
token_set_time = "12:00"
am_pm = "AM"

[SYSTEM]
ver = "{version}"
autoupdate = True
debug = "True"
""")
    
    print(f'Configuration saved to {config_file}')

def main():
    """Main installer function"""
    try:
        if name == "nt":
            os.system("cls")
            print("Welcome to the Windows Komli Installer!")
            print(f"Komli Version: {version}")
            print("=" * 40)
            askconfig()
            if install_ollama:
                print("Downloading Ollama...")
                file_path = "OllamaSetup.exe"
                try:
                    response = requests.get("https://ollama.com/download/OllamaSetup.exe", stream=True)
                    if response.status_code == 200:
                        with open(file_path, 'wb') as file:
                            for chunk in response.iter_content(chunk_size=8192):
                                file.write(chunk)
                        print('File downloaded successfully')
                        time.sleep(0.5)
                        print("Installing Ollama...")
                        os.system(f'start /wait "" "{file_path}"')
                        print("Ollama installation completed!")
                        # Clean up the installer file
                        try:
                            os.remove(file_path)
                        except:
                            pass
                    else:
                        print(f'Failed to download file. Status code: {response.status_code}')
                        print('Please download Ollama manually from https://ollama.com')
                except Exception as e:
                    print(f'Error downloading Ollama: {e}')
                    print('Please download Ollama manually from https://ollama.com')
        else:
            os.system("clear")
            print("Welcome to the Unix/Linux/Mac Komli Installer!")
            print(f"Komli Version: {version}")
            print("=" * 40)
            askconfig()
            if install_ollama:
                print("Installing Ollama...")
                try:
                    result = os.system("curl -fsSL https://ollama.com/install.sh | sh")
                    if result == 0:
                        print("Ollama installation completed!")
                    else:
                        print("Ollama installation may have failed. Please check manually.")
                except Exception as e:
                    print(f"Error installing Ollama: {e}")
                    print("Please install Ollama manually from https://ollama.com")

        print("\nInstallation completed!")
        auto_run = input("Do you want to run komli now? [Yes]/No ").strip().lower()
        if auto_run in ["yes", ""]:
            print("Starting Komli...")
            os.system("python app.py")
        else:
            print("You can start Komli later by running 'python app.py'\nTip: If komli responds with 'Ai failed to respond' or similar, make sure you have pulled the model by running 'ollama pull qwen2.5-coder:0.5b' or the model you set in config.cfg")
        
    except KeyboardInterrupt:
        print("\n\nInstallation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\nAn error occurred during installation: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
